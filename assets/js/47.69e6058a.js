(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{213:function(a,t,r){"use strict";r.r(t);var e=r(0),s=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("div",{staticClass:"content"},[r("h1",{attrs:{id:"设计模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#设计模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 设计模式")]),a._v(" "),r("h2",{attrs:{id:"抽象工厂模式-abstract-factory"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#抽象工厂模式-abstract-factory","aria-hidden":"true"}},[a._v("#")]),a._v(" 抽象工厂模式 (Abstract Factory)")]),a._v(" "),r("h3",{attrs:{id:"概述"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#概述","aria-hidden":"true"}},[a._v("#")]),a._v(" 概述")]),a._v(" "),r("p",[r("code",[a._v("抽象工厂模式")]),a._v("为一组相关或依赖的对象提供创建接口，而不是直接定义他们的实现类")]),a._v(" "),r("h3",{attrs:{id:"应用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#应用","aria-hidden":"true"}},[a._v("#")]),a._v(" 应用")]),a._v(" "),r("p",[a._v("当你有组有一定关联的对象时，你可以用一个工厂去创建产品。有时候你想创建各种各样的产品。一个产品可以是任何的类。它可能是一个User,Airplane, 或者House.当处理房地产时，商业地产不同与住宅地产。在这个例子中，你可以创建两个工厂：一个商业地产工厂和一个住宅地产工厂。住宅地产工厂可以生产像住房和庄园。商业地产工厂可以生产像商城大厦和地段。房地产客户仍然可以做一些利润销售、购物、展销地段、庄园、房屋和商城建筑等操作。当你改变你的工厂时不必改变你的客户。")]),a._v(" "),r("h3",{attrs:{id:"抽象结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#抽象结构","aria-hidden":"true"}},[a._v("#")]),a._v(" 抽象结构")]),a._v(" "),r("p",[r("img",{attrs:{src:"/images/design_pattern/3-1.png",alt:"抽象工厂结构图"}})]),a._v(" "),r("ul",[r("li",[a._v("Client: 这个类用了抽象工厂方法。实现工厂可以作为一个参数传递给client的构造方法或者client可以足够灵活的知道使用哪些实现类而无需依赖注入。例如，一个client可以决定用一组基于操作系统(windows,linux,mac)的运行。")]),a._v(" "),r("li",[a._v("AbstractFactory: 它可以是被实现工厂(ConcreteFactory)实施/继承的一个接口或者抽象类。如果你用一个抽象类，默认的方法可以被创建到基础抽象类。")]),a._v(" "),r("li",[a._v("ConcreteFactory: 这个类继承于AbstractFactory并且生产具体的产品。在抽象图(3-1)中展示了两个实现工厂，实际情况可能有更多。")]),a._v(" "),r("li",[a._v("Product(A 和 B): 抽象类和接口将被实现产品类(Concrete Product Classes) A1, B1, A2, B2等实施。")]),a._v(" "),r("li",[a._v("Product(A1/B1和A2/B2): 这些类都属于某一组类。A1和B1不同于A2和B2，因此他们是由不同的工厂创建。这些是你需要关心的类，并且在有些情况下被客户使用。")])]),a._v(" "),r("h3",{attrs:{id:"案例"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#案例","aria-hidden":"true"}},[a._v("#")]),a._v(" 案例")]),a._v(" "),r("p",[a._v("你正在创建可以在PG-13和R型模式运行的模拟器。游戏的名字是 Garden Ninja。植物在庄园里成长并且商人销售和消费那些植物。你可以创建所有不同类型的水果和蔬菜。你可以通过不同的方式销售商品。对于商人来说基本的步骤如下：")]),a._v(" "),r("ol",[r("li",[a._v("种植一个庄园")]),a._v(" "),r("li",[a._v("销售产品")])]),a._v(" "),r("p",[a._v("游戏的目标没有改变。改变的东西是由玩家绘画的潜在的系列产品。它可以在某些方面改变玩家的熟悉度。\n你将创建两个独立的系列产品：")]),a._v(" "),r("ol",[r("li",[a._v("药物批发商")]),a._v(" "),r("li",[a._v("种植稻谷的农民")])]),a._v(" "),r("h3",{attrs:{id:"案例结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#案例结构","aria-hidden":"true"}},[a._v("#")]),a._v(" 案例结构")]),a._v(" "),r("p",[a._v("图3-2展示了案例的结构\n"),r("img",{attrs:{src:"/images/design_pattern/3-2.png",alt:"案例结构"}})]),a._v(" "),r("h2",{attrs:{id:"建造者模式-builder"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#建造者模式-builder","aria-hidden":"true"}},[a._v("#")]),a._v(" 建造者模式 (Builder)")]),a._v(" "),r("h2",{attrs:{id:"工厂方法模式-the-factory-method"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#工厂方法模式-the-factory-method","aria-hidden":"true"}},[a._v("#")]),a._v(" 工厂方法模式 (The Factory Method)")]),a._v(" "),r("h2",{attrs:{id:"原型模式-prototype"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#原型模式-prototype","aria-hidden":"true"}},[a._v("#")]),a._v(" 原型模式 (Prototype)")]),a._v(" "),r("h2",{attrs:{id:"单例模式-singleton"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#单例模式-singleton","aria-hidden":"true"}},[a._v("#")]),a._v(" 单例模式 (Singleton)")]),a._v(" "),r("h2",{attrs:{id:"简单工厂方法模式-simple-factory-method"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#简单工厂方法模式-simple-factory-method","aria-hidden":"true"}},[a._v("#")]),a._v(" 简单工厂方法模式 (Simple Factory Method)")]),a._v(" "),r("h2",{attrs:{id:"适配器模式-adapter"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#适配器模式-adapter","aria-hidden":"true"}},[a._v("#")]),a._v(" 适配器模式 (Adapter)")]),a._v(" "),r("h2",{attrs:{id:"桥接模式-bridge"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#桥接模式-bridge","aria-hidden":"true"}},[a._v("#")]),a._v(" 桥接模式 (Bridge)")]),a._v(" "),r("h2",{attrs:{id:"复合模式-composite"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#复合模式-composite","aria-hidden":"true"}},[a._v("#")]),a._v(" 复合模式 (Composite)")]),a._v(" "),r("h2",{attrs:{id:"装饰器模式-decorator"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#装饰器模式-decorator","aria-hidden":"true"}},[a._v("#")]),a._v(" 装饰器模式 (Decorator)")]),a._v(" "),r("h2",{attrs:{id:"门面模式-facades"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#门面模式-facades","aria-hidden":"true"}},[a._v("#")]),a._v(" 门面模式 (Facades)")]),a._v(" "),r("h2",{attrs:{id:"享元模式-flyweight"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#享元模式-flyweight","aria-hidden":"true"}},[a._v("#")]),a._v(" 享元模式 (Flyweight)")]),a._v(" "),r("h2",{attrs:{id:"代理模式-proxy"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#代理模式-proxy","aria-hidden":"true"}},[a._v("#")]),a._v(" 代理模式 (Proxy)")]),a._v(" "),r("h2",{attrs:{id:"责任链模式-chain-of-responsibility"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#责任链模式-chain-of-responsibility","aria-hidden":"true"}},[a._v("#")]),a._v(" 责任链模式 (Chain of Responsibility)")]),a._v(" "),r("h2",{attrs:{id:"命令模式-command"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#命令模式-command","aria-hidden":"true"}},[a._v("#")]),a._v(" 命令模式 (Command)")]),a._v(" "),r("h2",{attrs:{id:"解释器模式-interpreter"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#解释器模式-interpreter","aria-hidden":"true"}},[a._v("#")]),a._v(" 解释器模式 (Interpreter)")]),a._v(" "),r("h2",{attrs:{id:"迭代器模式-interator"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#迭代器模式-interator","aria-hidden":"true"}},[a._v("#")]),a._v(" 迭代器模式 (Interator)")]),a._v(" "),r("h2",{attrs:{id:"中介者模式-mediator"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#中介者模式-mediator","aria-hidden":"true"}},[a._v("#")]),a._v(" 中介者模式 (Mediator)")]),a._v(" "),r("h2",{attrs:{id:"备忘录模式-memento"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#备忘录模式-memento","aria-hidden":"true"}},[a._v("#")]),a._v(" 备忘录模式 (Memento)")]),a._v(" "),r("h2",{attrs:{id:"观察者模式-observer"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#观察者模式-observer","aria-hidden":"true"}},[a._v("#")]),a._v(" 观察者模式 (Observer)")]),a._v(" "),r("h2",{attrs:{id:"状态模式-state"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#状态模式-state","aria-hidden":"true"}},[a._v("#")]),a._v(" 状态模式 (State)")]),a._v(" "),r("h2",{attrs:{id:"战略模式-strategy"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#战略模式-strategy","aria-hidden":"true"}},[a._v("#")]),a._v(" 战略模式 (Strategy)")]),a._v(" "),r("h2",{attrs:{id:"模板方法模式-template-method"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#模板方法模式-template-method","aria-hidden":"true"}},[a._v("#")]),a._v(" 模板方法模式 (Template Method)")]),a._v(" "),r("h2",{attrs:{id:"访问者模式-vistor"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#访问者模式-vistor","aria-hidden":"true"}},[a._v("#")]),a._v(" 访问者模式 (Vistor)")]),a._v(" "),r("h2",{attrs:{id:"更多资源"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#更多资源","aria-hidden":"true"}},[a._v("#")]),a._v(" 更多资源")])])}],!1,null,null,null);t.default=s.exports}}]);